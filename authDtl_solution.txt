Data Model:
  case class authDtls(authCode: String, 
                      aua: String,
                      sa: String,
                      res_state_name: String)
                      
  case class res_St(res_st_desc: String, res_state_name: String)
============================================================================
Traits:
package authDetail
import cats.effect.IO
import cats.implicits._

/**
  * Trait responsible for reading/loading [[authDetails]].
  *
  * @author Xavier Alwin
  */

trait AuthDtls {
    def readAuthDtl(): IO[res_St]
}
====================================================================
Scala Program:

package authDetail
import org.apache.spark._
import org.apache.spark.SparkConf
import org.apache.spark.SparkContext._
import org.apache.spark.sql.SQLContext._
import org.apache.spark.sql.SparkSession
import org.apache.spark.sql._
import org.apache.spark.sql.DataFrame
import org.apache.spark.sql.types.StructType
import scala.io.Source
import org.apache.log4j._
import com.google.gson.Gson

object AuthDtls {
  class authCls extends AuthDtls
  {
    val fileName = "d:\\Alwin\\auth.csv" 
    val authRead   = spark.read
                    .option("header","true")
                    .csv( fileName)

    override def readAuthDtl(): IO[res_St] = {
      val trans_file = Source.fromFile(fileName).getLines().drop(1)
      val transactions = trans_file.map(lines => lines.split(",")).
          map(split => authDtls(split(0),split(2),split(3),split(128))).toList

      val filterauth = transactions.filter(line => line.aua != "650000" && line.sa != "SERVICEMON")
      val filtereqauasa = filterauth.filter(line => line.aua == line.sa)
      
      val res_state = filtereqauasa.map(_.res_state_name)
      
      val gson = new Gson
      val jsonString
      for (state_nm <- res_state) 
       {  
          val state_name = res_St(state_nm.toString)
          jsonString = gson.toJson(state_name)
       }
      jsonString
   }
}  
=========================================================
HTTP Layer:

import cats.effect.IO
import io.circe.Json
import org.http4s.HttpRoutes
import io.circe.generic.auto._
import org.http4s.circe.CirceEntityCodec._
import org.http4s.dsl.Http4sDsl
 
object AuthRoutes {
 
  private def errorBody(message: Message) = Json.obj(
    ("message", Json.fromString(message))
  )
 
  def routes(authDtls: AuthDtls): HttpRoutes[IO] = {
 
    val dsl = new Http4sDsl[IO]{}
    import dsl._
 
    HttpRoutes.of[IO] {
      case _ @ GET -> Root / "getResSt" =>
        authDtls.readAuthDtl().flatMap(resSt => Ok(resSt))
 
       }
    }
  }
========================================================
App Launcher:

import cats.effect.{ExitCode, IO, IOApp}
import org.http4s.server.Router
import org.http4s.implicits._
import org.http4s.server.blaze._
import cats.implicits._
 
object Main extends IOApp {
 
  private val authDtls: AuthDtls = new authCls
 
  val httpRoutes = Router[IO](
    "/" -> AuthRoutes.routes(authDtls)
  ).orNotFound
 
  override def run(args: List[String]): IO[ExitCode] = {
 
    BlazeServerBuilder[IO]
      .bindHttp(9000, "0.0.0.0")
      .withHttpApp(httpRoutes)
      .serve
      .compile
      .drain
      .as(ExitCode.Success)
  }
}
=========================================================================
Test application handles http request, to run the Main object

>curl -X GET localhost:9000/getResSt \
> 
>[{"res_state_name":"Andhra Pradesh"}   - Output Result
{"res_state_name":"Andhra Pradesh"}    
]
=======================================